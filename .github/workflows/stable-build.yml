### This workflow setup instance then build and push images ###
name: Multi-arch build stable
run-name: ${{ inputs.tag }} (${{ inputs.release_number }})

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag for release (ex. 1.2.3.45)'
        type: string
        required: true
      release_number:
        description: 'Sequence number of the release (ex. x.x.x.<number>)'
        type: string
        required: true
        default: '1'
      latest:
        description: 'Push latest tag?'
        type: boolean
        required: true
        default: true
      dry_run:
        description: 'Build only (do not push to registry)'
        type: boolean
        required: false
        default: false

env:
  COMPANY_NAME: "onlyoffice"
  PRODUCT_NAME: "documentserver"
  VERSION: ${{ github.event.inputs.tag }}
  RELEASE_NUMBER: ${{ github.event.inputs.release_number }}
  LATEST: ${{ github.event.inputs.latest }}
  DRY_RUN: ${{ github.event.inputs.dry_run }}

jobs:
  build:
    name: "Release image: DocumentServer${{ matrix.edition }}"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        images: ["documentserver-stable"]
        edition: ["", "-ee", "-de"]
    steps:
      - name: Checkout code 
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
     
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Verify Docker Hub access
        run: |
          echo "Verifying access to target repository..."
          docker pull hello-world
          echo "Docker Hub authentication successful"
          
          # Test repository access for each edition
          echo "Testing repository access..."
          for edition in "" "-ee" "-de"; do
            repo="${COMPANY_NAME}/${PRODUCT_NAME}${edition}"
            echo "Checking access to ${repo}..."
            if docker manifest inspect "${repo}:latest" >/dev/null 2>&1; then
              echo "✓ Can read ${repo}"
            else
              echo "✗ Cannot read ${repo} (may not exist or no access)"
            fi
          done
        shell: bash

      - name: Build documentserver-release
        env:
          TARGET: ${{ matrix.images }}
          PRODUCT_EDITION: ${{ matrix.edition }}
        run: |
          set -eux
          TESTING_IMAGE=${COMPANY_NAME}/4testing-${PRODUCT_NAME}${PRODUCT_EDITION}
          export PRODUCT_EDITION
          export PULL_TAG="${VERSION}"
          export TAG="${VERSION%.*}.${RELEASE_NUMBER}"
          export SHORTER_TAG="${VERSION%.*}"
          export SHORTEST_TAG="${VERSION%.*.*}"
          
          # Trim any whitespace from variables
          PULL_TAG=$(echo "${PULL_TAG}" | xargs)
          TAG=$(echo "${TAG}" | xargs)
          SHORTER_TAG=$(echo "${SHORTER_TAG}" | xargs)
          SHORTEST_TAG=$(echo "${SHORTEST_TAG}" | xargs)
          
          # Re-export cleaned variables
          export PULL_TAG
          export TAG
          export SHORTER_TAG
          export SHORTEST_TAG
          
          echo "Building with the following tags:"
          echo "PULL_TAG: '${PULL_TAG}'"
          echo "TAG: '${TAG}'"
          echo "SHORTER_TAG: '${SHORTER_TAG}'"
          echo "SHORTEST_TAG: '${SHORTEST_TAG}'"
          echo "Target repository: ${COMPANY_NAME}/${PRODUCT_NAME}${PRODUCT_EDITION}"
          echo "Dry run mode: ${DRY_RUN}"
          
          # Validate tag format
          if [[ "${TAG}" =~ [[:space:]] ]]; then
            echo "ERROR: TAG contains whitespace: '${TAG}'"
            exit 1
          fi
          
          # Choose build command based on dry-run setting
          if [[ "${DRY_RUN}" == "true" ]]; then
            echo "DRY RUN: Building without pushing..."
            build_cmd="docker buildx bake -f docker-bake.hcl ${TARGET}"
          else
            echo "Building and pushing..."
            build_cmd="docker buildx bake -f docker-bake.hcl ${TARGET} --push"
          fi
          
          # Attempt to build (and optionally push)
          if ${build_cmd}; then
            if [[ "${DRY_RUN}" == "true" ]]; then
              echo "DONE: Dry run build success (no push attempted)"
            else
              echo "DONE: Build and push success"
            fi
            exit 0
          else
            echo "ERROR: Build failed"
            if [[ "${DRY_RUN}" != "true" ]]; then
              echo "Authorization troubleshooting:"
              echo "1. Verify Docker Hub token has push access to: ${COMPANY_NAME}/${PRODUCT_NAME}${PRODUCT_EDITION}"
              echo "2. Check if repository exists: https://hub.docker.com/r/${COMPANY_NAME}/${PRODUCT_NAME}${PRODUCT_EDITION}"
              echo "3. Ensure token has 'Public Repo Write' permissions"
              echo "4. Try running with dry_run=true to test build without push"
            fi
            exit 1
          fi
        shell: bash

  build-nonexample:
    name: "Release image: DocumentServer${{ matrix.edition }}-nonExample"
    runs-on: ubuntu-latest
    needs: [build]
    if: ${{ false }}
    strategy:
      fail-fast: false
      matrix:
        images: ["documentserver-nonexample"]
        edition: ["", "-ee", "-de"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: build image
        env:
          TARGET: ${{ matrix.images }}
          PRODUCT_EDITION: ${{ matrix.edition }}
        run: |
          set -eux
          export PULL_TAG=${VERSION%.*}.${RELEASE_NUMBER}
          export TAG=${VERSION%.*}.${RELEASE_NUMBER}
          docker buildx bake -f docker-bake.hcl "${TARGET}" --push
        shell: bash

  build-ucs-ubuntu20:
    name: "Release image: DocumentServer${{ matrix.edition }}-ucs"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        edition: ["", "-ee"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: build UCS
        env:
          PACKAGE_BASEURL: ${{ secrets.REPO_BASEURL }}
          PRODUCT_EDITION: ${{ matrix.edition }}
        run: |
           set -eux
           export DOCKERFILE=Dockerfile
           export BASE_VERSION=20.04
           export PG_VERSION=12
           export PACKAGE_SUFFIX=
           export TAG=${VERSION%.*}.${RELEASE_NUMBER}
           export PACKAGE_VERSION=$( echo ${VERSION} |  sed -E 's/(.*)\./\1-/')
           docker buildx bake -f docker-bake.hcl documentserver-ucs --push
        shell: bash
